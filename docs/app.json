[{"name":"app.R","content":"\r\n\r\n#### Aplicación shiny\r\n\r\n\r\n\r\n# paquetes necesarios\r\nlibrary(shiny)\r\nlibrary(shinydashboard)\r\nlibrary(shinycssloaders)\r\nlibrary(DT)\r\nlibrary(tidyverse)\r\nlibrary(ggthemes)\r\nlibrary(readxl)\r\nlibrary(stringdist)\r\nlibrary(stringr)\r\nlibrary(stringi)\r\nlibrary(parallel)\r\nlibrary(reactable)\r\n\r\n### cargar funciones\r\n\r\n## funciones a utilizar\r\n\r\nsource(\"Server/funciones.R\")\r\n\r\n\r\n### Configurar encabezado del dashboard\r\n\r\ndbHeader <- dashboardHeader(\r\n  \r\n  \r\n  \r\n  title =  \"Aplicación de homologación\",\r\n  titleWidth = \"320px\",\r\n  \r\n  tags$li(a(href = 'https://datamexlabs.com/',\r\n            tags$img(src = 'https://datamexlabs.com/wp-content/uploads/2024/06/transparentLogo-1024x156.png',\r\n                     title = \"Pagina Universidad\",\r\n                     height = \"50px\"),\r\n            style = \"padding-top:10px; padding-bottom:10px;\"),\r\n          class = \"dropdown\")\r\n  \r\n)\r\n\r\n\r\n\r\n## contenido de sidebar \r\n\r\ndbsider <- dashboardSidebar(\r\n  sidebarMenu(id = \"partes\",\r\n              \r\n              menuItem(\"Algoritmo de homologación\", tabName = \"algoritmo\",\r\n                       icon = icon(\"earth-americas\")),\r\n              \r\n              menuItem(\"Base de datos maestra\", tabName = \"datosmaestros\",\r\n                       icon = icon(\"book-bookmark\"))\r\n  ), width = 320\r\n  \r\n)\r\n\r\n\r\ndbody <- dashboardBody(\r\n  \r\n  ## incluir css\r\n  includeCSS(\"html/estilo.css\"),\r\n  \r\n  \r\n  tabItems(\r\n    \r\n    #tabitem1\r\n    tabItem(tabName=\"algoritmo\",\r\n            \r\n            uiOutput('cajainicial'), \r\n          \r\n        \r\n      fluidPage(\r\n            box(\r\n              title = \"Primeras observaciones de la base de datos\",\r\n              status = \"primary\", solidHeader = T, width = 12,\r\n              height = 460,\r\n              DTOutput(\"tablainicial\") ),  \r\n         uiOutput('uitablahomologados')\r\n            \r\n    )),\r\n    \r\n    tabItem(tabName = \"datosmaestros\",\r\n            \r\n     fluidPage(       \r\n            box(\r\n              title = \"Base de datos maestros\",\r\n              status = \"primary\", solidHeader = T, width = 12,\r\n              height = 0,\r\n              DTOutput(\"tablamaestros\") )\r\n            \r\n            ))\r\n))\r\n\r\n\r\n\r\n## construcción de la ui\r\nui <- dashboardPage(\r\n  dbHeader,\r\n  dbsider,\r\n  dbody)\r\n\r\n\r\n\r\n\r\nserver <- function(input, output){ \r\n  source(\"Server/Server.R\", local = T)\r\n} \r\n\r\n\r\nshinyApp(ui, server)\r\n\r\n","type":"text"},{"name":"Server/Server.R","content":"\r\n\r\n#datos <- reactiveVal(NULL)  # variable reactiva vacía\r\n\r\n#observeEvent(input$Archivo, {  \r\n#  file <- input$Archivo\r\n#  if (is.null(file)) return()  # No hacer nada si no hay archivo\r\n\r\n#  file$datapath <- gsub(\"\\\\\", \"/\", file$datapath, fixed = TRUE)\r\n\r\n#  data <- read.csv(file$datapath, header = TRUE)  # Leer el archivo solo una vez\r\n\r\n#  datos(data)  # Guardar los datos en la variable reactiva\r\n#})\r\n\r\n\r\n\r\n### Server \r\n\r\n### boton para homologar datos\r\n\r\noutput$botonhomologar <- renderUI({\r\n  \r\n  \r\n  actionButton(inputId=\"Homologar\",\r\n               label=\"Homologar productos\",\r\n               icon=icon(\"sliders\"),\r\n               class = \"text-center\")\r\n})\r\n\r\n# Caja de presentación\r\noutput$cajainicial <- renderUI({\r\n  \r\n  box(\r\n    title = \"Seleccione información para Visualizar:\",\r\n    status = \"primary\", solidHeader = T, width = 12,\r\n    height = 200,\r\n    fileInput(\"Archivo\", label = 'Cargue su archivo de productos',\r\n              buttonLabel = \"Subir archivo\",\r\n              placeholder = \"No se ha seleccionado ningún archivo\",\r\n              accept = c(\".xlsx\")),\r\n    uiOutput(\"botonhomologar\")\r\n  )\r\n  \r\n  \r\n})\r\n\r\n\r\n### cargar base de datos\r\n\r\ndata_cargada <- reactive({\r\n  \r\n  \r\n  file <- input$Archivo\r\n  if (is.null(file)) return(NULL)\r\n  \r\n  file$datapath <- gsub(\"\\\\\", \"/\", file$datapath, fixed = TRUE)\r\n  \r\n  data <- read_xlsx(file$datapath)\r\n  \r\n  #data <- data[, c(1:4)]\r\n  \r\n  data <- data[-1,]\r\n  \r\n  #colnames(data) <- c(\"CodigoDistribuidor\", \"NombreCliente\", \"CODIGODISTRIBUIDOR\",\r\n  #                    \"NOMBREPRODUCTODISTRIBUIDOR\")\r\n  \r\n  colnames(data) <- c(\"CODIGO DISTRIBUIDOR\", \"CODIGO PRODUCTO DITRIBUIDOR\",\r\n                      \"NOMBRE PRODUCTO DISTRIBUIDOR\", \r\n                      \"CORPORATIVO\") |> tolower()\r\n  \r\n  return(data)\r\n})\r\n\r\n\r\noutput$tablainicial <- renderDT({\r\n  \r\n  data <- data_cargada()\r\n  \r\n  datatable(data |> head(5))\r\n})\r\n\r\n\r\n### homologar productos\r\n\r\nresultados <- eventReactive(input$Homologar, {\r\n  \r\n  \r\n  withProgress(\r\n    message = \"Organizando la base de datos maestros\",\r\n    detail = \"Espere, por favor...\",\r\n    value = 0,\r\n    {\r\n      #sheet = excel_sheets(file$datapath)\r\n      #print(sheet)\r\n      \r\n      file <- input$Archivo\r\n      if (is.null(file)) return(NULL)\r\n      \r\n      print(\"cargando base de datos maestros\")\r\n      \r\n      datamaestro <- read_xlsx(file$datapath, sheet =  excel_sheets(file$datapath)[3])\r\n      \r\n      print(\"Base maestros cargada\")\r\n      \r\n      \r\n      #datamaestro <- datamaestro[, c(1, 2)]\r\n      \r\n      #colnames(datamaestro) <- c(\"CODIGOPRODUCTOMAESTRO\",\r\n      #                           \"NOMBREPRODUCTOMAESTRO\")\r\n      \r\n     \r\n      datamaestro <- datamaestro[-1 , c(1:3, 7, 10, 12, 14, 16:18)]\r\n      \r\n      colnames(datamaestro) <- c(\"Corporativo\", \"Codigo Producto maestro\",\r\n                     \"DescripcionProductomaestro\", \"Plataforma\", \r\n                     \"Categoria\", \"Familia\", \"Marca\", \"Presentacion\", \"UnidadesPorCaja\", \r\n                     \"PesoUnidadBase\")\r\n      \r\n      \r\n      #data <- read_xlsx(file$datapath)\r\n      \r\n     # data <- data[1:500, c(1:4)]\r\n      \r\n      data <- data_cargada()\r\n      \r\n     # colnames(data) <- c(\"CodigoDistribuidor\", \"NombreCliente\", \"CODIGODISTRIBUIDOR\",\r\n      #                    \"NOMBREPRODUCTODISTRIBUIDOR\")\r\n      \r\n      \r\n      incProgress(5/10, detail = \"Encontrando mejor coincidencia\")\r\n      \r\n      colnames(data)\r\n      colnames(datamaestro)\r\n      \r\n      # Aplicar la función a cada elemento de la base de datos\r\n      coincidencias <- sapply(data$`nombre producto distribuidor` |> toupper() |>\r\n                                limpiar_texto(),\r\n                              encontrar_mejor_coincidencia, \r\n                              candidatos = datamaestro$DescripcionProductomaestro |>\r\n                                estandarizar_texto() |> limpiar_texto())\r\n      \r\n      \r\n      \r\n      \r\n      # Mostrar resultado\r\n      final <- data.frame(\r\n        NombreProducto = data$`nombre producto distribuidor`,\r\n        CodigoProducto = data$`codigo producto ditribuidor`,\r\n        CodigoDistribuidor = data$`codigo distribuidor`,\r\n        Corporativo = data$corporativo,\r\n        DescripcionProductomaestro = coincidencias\r\n      )\r\n      \r\n      final <- merge(final, datamaestro, by = \"DescripcionProductomaestro\", all.x = T)\r\n      \r\n      \r\n      colnames(final) <- c(\"Producto maestro\", \"Producto\", \"Codigo Producto\", \r\n                           \"Codigo Distribuidor\", \"Corporativo\", \"Corporativo maestro\",\r\n                           \"Codigo Producto maestro\", \r\n                           \"Plataforma\", \"Categoria\", \"Familia\", \"Marca\", \"Presentacion\", \r\n                           \"UnidadesPorCaja\", \"PesoUnidadBase\")\r\n      \r\n      \r\n      #### organizas columnas\r\n      \r\n      final$similaridad <- 1 - stringdist(final$Producto |> tolower(),\r\n                                          final$`Producto maestro` |> tolower(),\r\n                                          method = \"jaccard\")\r\n      \r\n      \r\n      ## ordenar de mayor a menor\r\n      \r\n      final <- final |> arrange(desc(similaridad))\r\n      \r\n      \r\n      final[is.na(final)] <- \"-\"\r\n      \r\n      final$similaridad <- final$similaridad |> as.numeric() |> round(4)\r\n      \r\n      \r\n      final <- dplyr::select(final, c(\"Producto\", \"Producto maestro\",\r\n                               \"Codigo Producto\", \"Codigo Producto maestro\",\r\n                               \"Codigo Distribuidor\", \"Corporativo\", \"similaridad\",\r\n                               \"Corporativo maestro\",\r\n                               \"Plataforma\", \"Categoria\", \"Familia\", \"Marca\", \"Presentacion\", \r\n                               \"UnidadesPorCaja\", \"PesoUnidadBase\"))\r\n      \r\n      \r\n      return(final)\r\n    }\r\n  )\r\n})\r\n\r\n\r\n\r\noutput$tablahomologados <- renderDT({\r\n  \r\n  datahomologada <- resultados()\r\n  \r\n  datatable(\r\n    datahomologada[, 1:7],  # Seleccionar las primeras 7 columnas de la base de datos\r\n    options = list(\r\n      dom = 'frtip',  # 'f' para la barra de búsqueda, 'r' para el procesado, 't' para la tabla, 'i' para información, 'p' para la paginación\r\n      pageLength = 10  # Número de filas por página\r\n    )\r\n  )\r\n  \r\n})\r\n\r\noutput$descargar <- downloadHandler(\r\n  filename = function() {\r\n    paste(\"Homologación del Archivo\", gsub(\"\\\\.xlsx$\", \"\",\r\n                                             input$Archivo$name,\r\n                                             ignore.case = TRUE), Sys.Date(), \".xlsx\")\r\n  },\r\n  content = function(file) {\r\n    writexl::write_xlsx(resultados(), path = file)\r\n  }\r\n)\r\n\r\n\r\noutput$uitablahomologados <- renderUI({\r\n  \r\n  box(\r\n    title = \"Base de datos homologada\",\r\n    status = \"primary\", solidHeader = T, width = 12,\r\n    height = 0,\r\n    \r\n    downloadButton(\"descargar\", \"Descargar Base de datos homologada\"), \r\n    DTOutput(\"tablahomologados\") )\r\n  \r\n})\r\n\r\n\r\noutput$tablamaestros <- renderDT({\r\n  \r\n  \r\n  file <- input$Archivo\r\n  if (is.null(file)) return(NULL)\r\n  \r\n  file$datapath <- gsub(\"\\\\\", \"/\", file$datapath, fixed = TRUE)\r\n  \r\n  \r\n  datamaestro <- read_xlsx(file$datapath, sheet =  excel_sheets(file$datapath)[3])\r\n  \r\n  datamaestro <- datamaestro[-1 , c(1:3, 7, 10, 12, 14, 16:18)]\r\n  \r\n  datamaestro <- datamaestro[, c(1:7)]\r\n  \r\n  #colnames(datamaestro) <- c(\"CODIGOPRODUCTOMAESTRO\",\r\n   #                          \"NOMBREPRODUCTOMAESTRO\")\r\n  \r\n  datatable(datamaestro)\r\n  \r\n})\r\n","type":"text"},{"name":"Server/funciones.R","content":"\r\n## funciones\r\n\r\n\r\nextraer_texto_parentesis <- function(vec) {\r\n  stringr::str_extract(vec, \"\\\\([^()]+\\\\)$\")\r\n}\r\n\r\nextraer_numeros_parentesis <- function(texto) {\r\n texto <-  str_extract(texto, \r\n                           \"(?<=\\\\()[^()]+(?=\\\\))\") |>\r\n    str_replace_all(\"[()]\", \"\") |>\r\n   str_extract(\"^[^\\\\.\\\\s-]+\")\r\n  \r\n  return(texto)\r\n}\r\n\r\n\r\n\r\ncontar_palabras <- function(texto) {\r\n  stri_count_words(texto)\r\n}\r\n\r\nseleccionar_ultimas_n <- function(texto) {\r\n  tryCatch({\r\n    num_palabras <- contar_palabras(texto)\r\n    contiene_numeros <- str_detect(texto, \"\\\\d\")  # 🔍 Detecta si hay al menos un número\r\n    \r\n    if (!contiene_numeros) {\r\n      return(texto)  # 🚀 Si no hay números, devuelve el texto completo\r\n    }\r\n    \r\n    n <- ifelse(num_palabras >= 6, 5, 3)  # 🔹 Define `n` según la cantidad de palabras\r\n    \r\n    palabras <- unlist(str_split(texto, \"\\\\s+\"))  # 🔹 Divide el texto en palabras\r\n    \r\n    if (length(palabras) >= n) {\r\n      paste(tail(palabras, n), collapse = \" \")  # 🔹 Toma las últimas `n` palabras\r\n    } else {\r\n      texto  # 🔹 Devuelve el texto original si tiene menos palabras que `n`\r\n    }\r\n  }, error = function(e) texto)  # 🔹 En caso de error, devuelve el texto original\r\n}\r\n\r\n\r\n\r\n\r\nlimpiar_texto <- function(texto) {\r\n  \r\n  ## correción de texto \r\n  texto <- gsub(\"^[^A-Za-z]+\", \"\", texto)\r\n  \r\n  texto <- gsub(\"\\\\s*\\\\(.*?\\\\)\", \" \", texto) |> str_squish()\r\n  \r\n  texto <- gsub(\"\\\\b[A-Z]\\\\b\", \"\", texto) |> str_squish()\r\n  \r\n  texto <- gsub(\"\\\\bUND\\\\b|\\\\b\\\\S*\\\\?\\\\S*\\\\b\", \"\", texto) |> str_squish()\r\n  \r\n  return(texto)\r\n}\r\n\r\n## estandarizar texto\r\n\r\nestandarizar_texto <- function(texto) {\r\n  \r\n  texto <- str_replace_all(texto, \"(?<=\\\\p{L})\\\\.(?=\\\\p{L})\", \" \")\r\n  \r\n  ## comillas\r\n  texto <- chartr(\"ÁÉÍÓÚÜáéíóúüñ\", \"AEIOUUaeiouun\", texto)\r\n  \r\n  return(texto)\r\n}\r\n\r\n## implementar \r\n\r\n# Función para encontrar la mejor coincidencia dentro del umbral\r\n\r\n\r\n\r\nencontrar_mejor_coincidencia <- function(texto, \r\n                                         candidatos, \r\n                                         peso_jaccard = 0.3, \r\n                                         peso_lcs = 0.5, \r\n                                         peso_jw = 0.2, \r\n                                         percentil_umbral = 0.1,  # Umbral dinámico (percentil 10%)\r\n                                         umbral_minimo = 0.42) {  # Umbral fijo mínimo\r\n  \r\n  \r\n  # Calcular las distancias para todos los candidatos\r\n  dist_jaccard <- stringdist(texto, candidatos, method = \"jaccard\")\r\n  dist_lcs <- stringdist(texto, candidatos, method = \"lcs\")\r\n  dist_jw <- stringdist(texto, candidatos, method = \"jw\")\r\n\r\n  # Normalizar cada distancia\r\n  dist_jaccard <- dist_jaccard / max(dist_jaccard, na.rm = TRUE)\r\n  dist_lcs <- dist_lcs / max(dist_lcs, na.rm = TRUE)\r\n  dist_jw <- dist_jw / max(dist_jw, na.rm = TRUE)\r\n  \r\n  # Calcular la distancia combinada con pesos\r\n  dist_combinada <- (peso_jaccard * dist_jaccard) + \r\n    (peso_lcs * dist_lcs) + \r\n    (peso_jw * dist_jw)\r\n  \r\n  # Definir el umbral dinámico basado en el percentil\r\n  umbral_dinamico <- quantile(dist_combinada, percentil_umbral, na.rm = TRUE)\r\n  \r\n  # Elegir el umbral final (el menor entre el dinámico y el mínimo predefinido)\r\n  umbral_final <- min(umbral_dinamico, umbral_minimo)\r\n  \r\n  # Filtrar solo las coincidencias dentro del umbral\r\n  dentro_del_umbral <- which(dist_combinada <= umbral_final)\r\n  \r\n  if (length(dentro_del_umbral) == 0) {\r\n    return(NA)  # Si no hay coincidencias dentro del umbral, devolver NA\r\n  }\r\n  \r\n  # Seleccionar la mejor coincidencia (mínima distancia combinada)\r\n  mejor_indice <- dentro_del_umbral[which.min(dist_combinada[dentro_del_umbral])]\r\n  \r\n  return(candidatos[mejor_indice])\r\n}\r\n","type":"text"},{"name":"html/estilo.css","content":"\n/* centrar header 1*/\n\nh1 {\n    text-align: center;\n    color: #6EBCD6;\n    font-size: 36px;\n    font-family: 'Karla', sans-serif;\n}\n\n\n\nh2 {\n    text-align: left;\n    color: #6EBCD6;\n    padding-top: 5px;\n    padding-right: 30px;\n    padding-left: 30px;\n}\n\nh3 {\n  text-align: left;\n  color: #6EBCD6;\n  padding-top: 5px;\n  padding-right: 30px;\n  padding-left: 30px;\n}\n\nh4 {\n  text-align: left;\n  color: #6EBCD6;\n  padding-top: 5px;\n  padding-right: 30px;\n  padding-left: 30px;\n}\n\nh5 {\n  text-align: left;\n  color: #6EBCD6;\n  padding-top: 5px;\n  padding-right: 30px;\n  padding-left: 30px;\n}\n\np {\n    font-size: 16px;\n    font-family: 'Karla', sans-serif;\n    padding-top: 5px;\n    padding-right: 30px;\n    padding-left: 30px;\n    color: #000000;\n    text-align: justify;\n    line-height: 1.8;\n\n}\n\n/* Desactivar el boton asidebar */\n\n.sidebar-toggle{\n  display: none;\n}\n\n/* imagenes */\n\n .container-fluid img {\n    width: 100%  !important; \n }\n\n /* Modificar el div de las cajas */\n div.box-header {\n  color: white;\n  background-color: rgb(24, 199, 243);\n  text-align: center;\n\n  }\n\n  /* Modificar el texto de las cajas */\n  h3.box-title {\n    color: rgb(255, 255, 255);\n    font-size: 18px;\n    font-family: 'Karla', sans-serif;\n\n  }\n\n  .box.box-solid.box-primary>.box-header {\n    color:#fff;\n    background: rgb(36, 182, 250)}\n  \n  .box.box-solid.box-primary{\n  border-bottom-color:#666666;\n  border-left-color:#666666;\n  border-right-color:#666666;\n  border-top-color:#666666;\n  }\n\n\nli {\n    font-size: 16px;\n    font-family: system-ui, -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif;\n    \n}\n\n/* Centrar y manipular un ul*/\n\n\n\n\n  /* Titulo cuando es precionado */\n\n  .skin-blue .main-header .logo{\n    background-color: #ffffff;\n    color: #000000;\n    position: fixed;\n    overflow: visible;\n    }\n\n\n  .skin-blue .main-header .logo:hover {\n    background-color: #ffffff;\n    color: #000000;\n    position: fixed;\n    overflow: visible;\n  }\n\n\n    /* Resto de navbar */\n    .skin-blue .main-header .navbar {\n    background-color: #ffffff;\n    position: sticky;\n    overflow: visible;\n    }\n    \n\n\n    /* main sidebar */\n    .skin-blue .main-sidebar {\n    background-color: rgb(0, 0, 0);\n    width: 320px;\n    position: fixed;\n    overflow: visible;\n    }\n    \n\n\n\n    /* Elemento seleccionado */\n    .skin-blue .main-sidebar .sidebar .sidebar-menu .active a{\n    background-color: #4e5051;\n    }\n    \n    /* other links in the sidebarmenu */\n    .skin-blue .main-sidebar .sidebar .sidebar-menu a{\n    background-color: rgb(34,45,50);\n    color: #ffffff;\n    }\n\n    \n    \n    /* other links in the sidebarmenu when hovered */\n    .skin-blue .main-sidebar .sidebar .sidebar-menu a:hover{\n    background-color: hsla(283, 78%, 89%, 0.896);\n    }\n    /* toggle button when hovered  */\n\n    .skin-blue  .navbar {\n        background-color: #ffffff;\n        color: #ffffff;\n        position: fixed;\n        overflow: visible;\n    }\n\n    \n\n    /* Cuerpo color  */\n    .content-wrapper, .right-side {\n    background-color: #ffffff;\n    }\n\n  \n    /* centrar pdfs */\n    /* no mostrar errores de shiny */\n\n    .shiny-output-error { visibility: hidden; }\n    .shiny-output-error:before { visibility: visible; content: ''; }","type":"text"}]
